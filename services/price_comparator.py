from typing import Dict, Optional, List
from .binance import BinanceAPI
from .bybit import BybitAPI
import asyncio


class PriceComparator:
    def __init__(self):
        self.exchanges = {
            "binance": BinanceAPI(),
            "bybit": BybitAPI(),
        }

    async def compare_prices(self, symbol: str) -> List[Dict]:
        """–°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã –Ω–∞ –≤—Å–µ—Ö –±–∏—Ä–∂–∞—Ö —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π"""
        tasks = []
        exchange_names = []

        for name, exchange in self.exchanges.items():
            tasks.append(self._safe_get_price(exchange, symbol, name))
            exchange_names.append(name)

        results = await asyncio.gather(*tasks, return_exceptions=True)

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {symbol}:")
        valid_results = []
        for name, result in zip(exchange_names, results):
            if isinstance(result, Exception):
                print(f"  ‚ùå {name}: –û—à–∏–±–∫–∞ - {result}")
            elif result and result.get('price'):
                print(f"  ‚úÖ {name}: ${result['price']:,.2f}")
                valid_results.append(result)
            else:
                print(f"  ‚ö†Ô∏è  {name}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ü–µ–Ω: {len(valid_results)}")

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        valid_results.sort(key=lambda x: x['price'])
        return valid_results

    async def _safe_get_price(self, exchange, symbol: str, exchange_name: str):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            return await asyncio.wait_for(exchange.get_price(symbol), timeout=10.0)
        except asyncio.TimeoutError:
            print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è {exchange_name}")
            return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {exchange_name}: {e}")
            return None

    async def get_best_prices(self, symbol: str) -> Dict:
        """–ù–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ü–µ–Ω—ã"""
        prices = await self.compare_prices(symbol)

        if len(prices) == 0:
            return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏"}
        elif len(prices) == 1:
            return {
                "best_buy": prices[0],
                "best_sell": prices[0],
                "all_prices": prices,
                "spread": 0,
                "spread_percent": 0,
                "warning": "–î–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–æ–π –±–∏—Ä–∂–∏"
            }
        else:
            return {
                "best_buy": prices[0],
                "best_sell": prices[-1],
                "all_prices": prices,
                "spread": prices[-1]['price'] - prices[0]['price'],
                "spread_percent": ((prices[-1]['price'] - prices[0]['price']) / prices[0]['price']) * 100
            }

    async def get_multiple_prices(self, symbols: List[str]) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        results = {}

        for symbol in symbols:
            print(f"\nüîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ü–µ–Ω—ã –¥–ª—è {symbol}...")
            best_price = await self.get_best_prices(symbol)
            results[symbol] = best_price

            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
            await asyncio.sleep(0.5)

        return results

    async def debug_exchanges(self, symbol: str = "BTC"):
        """–ü–æ–¥—Ä–æ–±–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –≤—Å–µ—Ö –±–∏—Ä–∂"""
        print(f"\nüêõ –û–¢–õ–ê–î–ö–ê –ë–ò–†–ñ –î–õ–Ø {symbol}:")
        for name, exchange in self.exchanges.items():
            print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º {name}...")
            try:
                result = await self._safe_get_price(exchange, symbol, name)
                if result:
                    print(f"   ‚úÖ –£—Å–ø–µ—Ö: ${result['price']:,.2f}")
                else:
                    print(f"   ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                print(f"   üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")