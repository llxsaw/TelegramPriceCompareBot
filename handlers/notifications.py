from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

from services.notification_service import NotificationService
from keyboards.notifications import get_alerts_keyboard

router = Router()


class AlertStates(StatesGroup):
    choosing_symbol = State()
    choosing_condition = State()
    entering_price = State()


@router.message(Command("alerts"))
@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def alerts_command(message: Message, state: FSMContext):
    text = """
üîî *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω:

‚Ä¢ üìà –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –í–´–®–ï —Ü–µ–ª–µ–≤–æ–π
‚Ä¢ üìâ –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ù–ò–ñ–ï —Ü–µ–ª–µ–≤–æ–π
‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await message.answer(text, parse_mode="Markdown", reply_markup=get_alerts_keyboard())


@router.message(F.text == "üìà –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
async def add_alerts_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä BTC):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AlertStates.choosing_symbol)


@router.message(AlertStates.choosing_symbol)
async def alert_symbol_chosen(message: Message, state: FSMContext):
    symbol = message.text.upper()
    await state.update_data(symbol=symbol)
    text = f"""
–í—ã–±—Ä–∞–Ω: {symbol}

–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
‚Ä¢ üìà –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –í–´–®–ï —Ü–µ–ª–µ–≤–æ–π
‚Ä¢ üìâ –£–≤–µ–¥–æ–º–∏—Ç—å –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ù–ò–ñ–ï —Ü–µ–ª–µ–≤–æ–π
    """

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìà –í—ã—à–µ —Ü–µ–ª–µ–≤–æ–π"), KeyboardButton(text="üìâ –ù–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π"),
             KeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞")],
        ],
        resize_keyboard=True,
    )
    await message.answer(text, reply_markup=keyboard)
    await state.set_state(AlertStates.choosing_condition)


@router.message(AlertStates.choosing_condition, F.text.in_(["üìà –í—ã—à–µ —Ü–µ–ª–µ–≤–æ–π", "üìâ –ù–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π"]))
async def alert_condition_chosen(message: Message, state: FSMContext):
    condition = "above" if "–í—ã—à–µ" in message.text else "below"
    await state.update_data(condition=condition)

    condition_text = "–≤—ã—à–µ" if condition == "above" else "–Ω–∏–∂–µ"
    data = await state.get_data()
    symbol = data['symbol']

    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É –¥–ª—è {symbol} (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç {condition_text} —ç—Ç–æ–π):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AlertStates.entering_price)


@router.message(AlertStates.entering_price)
async def alert_price_entered(message: Message, state: FSMContext):
    try:
        target_price = float(message.text)
        data = await state.get_data()
        notification_service = NotificationService("crypto_bot.db", message.bot)
        success = await notification_service.add_alert(
            message.from_user.id,
            data["symbol"],
            target_price,
            data["condition"],
        )
        if success:
            condition_text = "–≤—ã—à–µ" if data["condition"] == "above" else "–Ω–∏–∂–µ"
            await message.answer(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {data['symbol']} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n"
                f"üîî –°—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –±—É–¥–µ—Ç {condition_text} ${target_price:,.2f}",
                reply_markup=get_alerts_keyboard()
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")

    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000.50")
        return
    await state.clear()


@router.message(F.text == "üìã –ú–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def show_alerts(message: Message, state: FSMContext):
    notification_service = NotificationService("crypto_bot.db", message.bot)
    alerts = await notification_service.get_user_alerts(message.from_user.id)

    if not alerts:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        return
    text = "üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\n"
    for alert in alerts:
        condition_emoji = "üìà" if alert.condition == "above" else "üìâ"
        condition_text = "–≤—ã—à–µ" if alert.condition == "above" else "–Ω–∏–∂–µ"
        text += f"{condition_emoji} {alert.symbol}: {condition_text} ${alert.target_price:,.2f}\n"

    await message.answer(text, parse_mode="Markdown")
